name: 'üîß CI - Build & Test'

# Áî®‰∫éÊûÑÂª∫„ÄÅÊµãËØïÂíåÈ™åËØÅcl-nestjs-alicloud-kmsÂ∫ìÁöÑÊåÅÁª≠ÈõÜÊàêÂ∑•‰ΩúÊµÅ
# Âú®ÈíàÂØπmainÂàÜÊîØÁöÑÊãâÂèñËØ∑Ê±Ç‰ª•ÂèäÊé®ÈÄÅÂà∞ÊâÄÊúâÂàÜÊîØÔºàÂèëÂ∏ÉÊèê‰∫§Èô§Â§ñÔºâÊó∂ËøêË°å
# Âú®Â§ö‰∏™Node.jsÁâàÊú¨‰∏äËøõË°åÊµãËØï‰ª•Á°Æ‰øùÂÖºÂÆπÊÄß

on:
  pull_request:
    branches: [main]
  push:
    # Âú®ÊâÄÊúâÂàÜÊîØÔºàÂåÖÊã¨mainÂàÜÊîØÔºâ‰∏äËøêË°åÔºå‰ΩÜË∑≥ËøáÂèëÂ∏ÉÊèê‰∫§
    branches: ['**']

jobs:
  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 15 # Prevent indefinite hanging
    # Skip if it's a release commit to avoid conflicts with release workflow
    if: >-
      ${{ !startsWith(github.event.head_commit.message, 'chore: release v') }}

    strategy:
      matrix:
        node-version: [20, 22]
      fail-fast: false # Don't cancel other jobs if one fails

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üì¶ Setup pnpm Package Manager
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: üü¢ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: üßπ Clear pnpm cache if needed
        run: |
          echo "Checking pnpm cache status..."
          pnpm store status || pnpm store prune || true

      - name: üìö Install Dependencies
        timeout-minutes: 5
        run: |
          echo "Installing root dependencies..."
          pnpm install --no-frozen-lockfile
          echo "Installing playground dependencies..."
          cd playground && pnpm install --no-frozen-lockfile

      - name: üîç Run Quality Checks (Lint & Test)
        timeout-minutes: 10
        run: |
          echo "Running linter..."
          pnpm lint
          echo "Running tests with coverage..."
          pnpm coverage
          echo "Building library..."
          pnpm build

      - name: ‚úÖ Verify Build Outputs
        run: |
          # Check required files exist
          required_files=(
            "dist/index.mjs" "dist/index.cjs" "dist/index.d.ts"
            "dist/index.d.mts" "dist/index.d.cts"
          )

          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "‚ùå Missing: $file"
              exit 1
            fi
          done

          echo "‚úÖ All build outputs verified"

      - name: üß™ Test Module Imports (ESM & CJS)
        timeout-minutes: 2
        run: |
          echo "Testing ESM imports..."
          node --input-type=module -e "
            import { KmsModule, KmsService } from './dist/index.mjs';
            console.log('‚úÖ ESM import successful:', typeof KmsModule, typeof KmsService);
            if (typeof KmsModule !== 'function' || typeof KmsService !== 'function') {
              throw new Error('Invalid exports detected');
            }
          "

          echo "Testing CJS requires..."
          node -e "
            const { KmsModule, KmsService } = require('./dist/index.cjs');
            console.log('‚úÖ CJS require successful:', typeof KmsModule, typeof KmsService);
            if (typeof KmsModule !== 'function' || typeof KmsService !== 'function') {
              throw new Error('Invalid exports detected');
            }
          "

      - name: üìä Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.node-version == 20 # Only upload once
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: üìà Upload Coverage to Coveralls
        uses: coverallsapp/github-action@v2
        if: matrix.node-version == 20 # Only upload once
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./coverage/lcov.info
